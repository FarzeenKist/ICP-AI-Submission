service: () -> {
    createQuiz: (vec record {question:text; correctAnswer:text; options:vec record {id:text; "text":text}}) -> (variant {Ok:record {id:text; "principal":principal; over:bool; rewarded:bool; questions:vec record {id:nat; question:text; correctAnswer:text; options:vec record {id:text; "text":text}; submittedAnswerId:opt text}}; Err:variant {Over:text; RewardingFailed:text; InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}});
    getAccount: () -> (variant {Ok:record {id:principal; earnedAmount:nat; quizIds:vec text}; Err:variant {Over:text; RewardingFailed:text; InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}}) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getCanisterId: () -> (principal) query;
    getQuiz: (text) -> (variant {Ok:record {id:text; "principal":principal; over:bool; rewarded:bool; questions:vec record {id:nat; question:text; correctAnswer:text; options:vec record {id:text; "text":text}; submittedAnswerId:opt text}}; Err:variant {Over:text; RewardingFailed:text; InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}}) query;
    getQuizzes: () -> (variant {Ok:vec record {id:text; "principal":principal; over:bool; rewarded:bool; questions:vec record {id:nat; question:text; correctAnswer:text; options:vec record {id:text; "text":text}; submittedAnswerId:opt text}}; Err:variant {Over:text; RewardingFailed:text; InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}}) query;
    submitAnswers: (text, vec record {id:text; answer:text}) -> (variant {Ok:record {id:text; "principal":principal; over:bool; rewarded:bool; questions:vec record {id:nat; question:text; correctAnswer:text; options:vec record {id:text; "text":text}; submittedAnswerId:opt text}}; Err:variant {Over:text; RewardingFailed:text; InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}});
}
